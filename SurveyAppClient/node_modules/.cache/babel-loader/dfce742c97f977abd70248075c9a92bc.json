{"ast":null,"code":"var _jsxFileName = \"D:\\\\src\\\\SurveyApp\\\\SurveyAppClient\\\\src\\\\components\\\\CbQuestion.js\";\nimport React from \"react\";\nimport { makeStyles, TextField, IconButton, Grid } from \"@material-ui/core\";\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport styles from \"../styles/QuestionStyle\";\nvar useStyles = makeStyles(styles);\n\nfunction Option(props) {\n  var classes = useStyles(); // const [opt, setOpt] = useState(props.option);\n  // useEffect(() => {\n  //   setOpt(props.option);\n  // })\n\n  var deleteItself = function deleteItself(e) {\n    props.deleteOption(props.index, e);\n  };\n\n  var handleNameChange = function handleNameChange(e) {\n    var newOpt = props.option;\n    newOpt['name'] = e.target.value;\n    props.updateOption(props.index, newOpt);\n  };\n\n  var handleJumpIndexChange = function handleJumpIndexChange(e) {\n    var newOpt = props.option;\n    newOpt['cascadeIndex'] = e.target.value;\n    props.updateOption(props.index, newOpt);\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CheckBoxOutlineBlankIcon, {\n    className: classes.optionIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: \"option \" + (props.index + 1),\n    value: props.option.name,\n    onChange: handleNameChange,\n    className: classes.optionInput,\n    InputLabelProps: {\n      shrink: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    onClick: deleteItself,\n    className: classes.optionDelete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ClearIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }))));\n} //multi choices\n\n\nexport default function CbQuestion(props) {\n  var _this = this;\n\n  var updateOptions = function updateOptions(index, opt) {\n    var newOptions = props.qInfo.options.slice();\n    newOptions[index] = opt;\n    props.updateOpt(newOptions);\n  };\n\n  var deleteOptions = function deleteOptions(index, e) {\n    var newOptions = props.qInfo.options.slice();\n    newOptions.splice(index, 1);\n    props.updateOpt(newOptions);\n  };\n\n  console.log(props.qInfo.options);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, props.qInfo.options.map(function (opt, index) {\n    return /*#__PURE__*/React.createElement(Option, {\n      key: index,\n      index: index,\n      option: opt,\n      updateOption: updateOptions,\n      deleteOption: deleteOptions,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    });\n  }));\n}","map":{"version":3,"sources":["D:/src/SurveyApp/SurveyAppClient/src/components/CbQuestion.js"],"names":["React","makeStyles","TextField","IconButton","Grid","CheckBoxOutlineBlankIcon","ClearIcon","styles","useStyles","Option","props","classes","deleteItself","e","deleteOption","index","handleNameChange","newOpt","option","target","value","updateOption","handleJumpIndexChange","optionIcon","name","optionInput","shrink","optionDelete","CbQuestion","updateOptions","opt","newOptions","qInfo","options","slice","updateOpt","deleteOptions","splice","console","log","map"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { makeStyles, TextField, IconButton, Grid } from \"@material-ui/core\";\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\n\r\nimport styles from \"../styles/QuestionStyle\";\r\n\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nfunction Option(props) {\r\n\r\n  const classes = useStyles();\r\n\r\n  // const [opt, setOpt] = useState(props.option);\r\n\r\n\r\n  // useEffect(() => {\r\n  //   setOpt(props.option);\r\n  // })\r\n\r\n  const deleteItself = e => {\r\n    props.deleteOption(props.index, e);\r\n  }\r\n\r\n  const handleNameChange = e => {\r\n    let newOpt = props.option;\r\n    newOpt['name'] = e.target.value;\r\n    props.updateOption(props.index, newOpt);\r\n  }\r\n\r\n  const handleJumpIndexChange = e => {\r\n    let newOpt = props.option;\r\n    newOpt['cascadeIndex'] = e.target.value;\r\n    props.updateOption(props.index, newOpt);\r\n  }\r\n\r\n  return (  \r\n    <Grid container direction=\"row\" >\r\n      <Grid item>\r\n        <CheckBoxOutlineBlankIcon className={classes.optionIcon} />\r\n      </Grid>\r\n      <Grid item>\r\n        <TextField \r\n        label={\"option \"+(props.index+1)}\r\n        value={props.option.name}\r\n        onChange={handleNameChange}\r\n        className={classes.optionInput}\r\n        InputLabelProps={{\r\n          shrink: true,\r\n        }}\r\n        />\r\n      </Grid>\r\n      <Grid item>\r\n        <IconButton onClick={deleteItself} className={classes.optionDelete}>\r\n          <ClearIcon  />\r\n        </IconButton>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n//multi choices\r\nexport default function CbQuestion(props) {\r\n\r\n\r\n  const updateOptions = (index, opt) => {\r\n    let newOptions = props.qInfo.options.slice();\r\n    newOptions[index] = opt;\r\n    props.updateOpt(newOptions);\r\n  }\r\n\r\n  const deleteOptions = (index, e) => {\r\n    let newOptions = props.qInfo.options.slice();\r\n    newOptions.splice(index, 1);\r\n    props.updateOpt(newOptions);\r\n  }\r\n\r\n  console.log(props.qInfo.options);\r\n  return (\r\n    <React.Fragment>\r\n      {\r\n        props.qInfo.options.map( (opt, index) => (\r\n          <Option \r\n          key={index} \r\n          index={index} \r\n          option={opt} \r\n          updateOption={updateOptions}\r\n          deleteOption={deleteOptions}\r\n          />\r\n          ))\r\n      }\r\n    </React.Fragment>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}