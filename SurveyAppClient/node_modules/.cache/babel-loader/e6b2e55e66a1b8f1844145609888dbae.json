{"ast":null,"code":"import _toConsumableArray from \"D:\\\\src\\\\SurveyApp\\\\SurveyAppClient\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"D:\\\\src\\\\SurveyApp\\\\SurveyAppClient\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\src\\\\SurveyApp\\\\SurveyAppClient\\\\src\\\\components\\\\Question.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Paper, makeStyles, Typography, Grid, RadioGroup, Radio, FormControl, FormControlLabel, Checkbox, Slider } from '@material-ui/core';\nimport styles from \"../styles/QuestionStyle\";\nvar useStyles = makeStyles(styles);\nexport default function Question(props) {\n  var _this = this;\n\n  var classes = useStyles();\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      radioValue = _useState2[0],\n      setRadioValue = _useState2[1];\n\n  var _useState3 = useState(function () {\n    if (props.qInfo.type === \"cb\") {\n      var cb = [];\n\n      for (var i = 0; i < props.qInfo.options.length; i++) {\n        cb = [].concat(_toConsumableArray(cb), [false]);\n      }\n\n      return cb;\n    }\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      checked = _useState4[0],\n      setChecked = _useState4[1]; // console.log(value);\n  // console.log(props.qInfo);\n\n\n  useEffect(function () {}, []);\n\n  var handleRadioChange = function handleRadioChange(e) {\n    setRadioValue(e.target.value);\n    props.update(props.index, Number(e.target.value));\n  };\n\n  var handleCbChange = function handleCbChange(e) {\n    console.log(e.target.value);\n    var cb = checked.slice();\n    cb[e.target.value] = !cb[e.target.value];\n    setChecked(cb);\n    console.log(cb);\n  };\n\n  var displayMainArea = function displayMainArea() {\n    if (props.qInfo.type === \"mc\") {\n      return /*#__PURE__*/React.createElement(FormControl, {\n        component: \"fieldset\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(RadioGroup, {\n        onChange: handleRadioChange,\n        value: radioValue.toString(),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }, props.qInfo.options.map(function (opt, index) {\n        return /*#__PURE__*/React.createElement(FormControlLabel, {\n          value: opt.optId.toString(),\n          control: /*#__PURE__*/React.createElement(Radio, {\n            color: \"primary\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 24\n            }\n          }),\n          label: opt.content,\n          key: index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }\n        });\n      })));\n    } else if (props.qInfo.type === \"cb\") {\n      return /*#__PURE__*/React.createElement(FormControl, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 9\n        }\n      }, props.qInfo.options.map(function (opt, index) {\n        return /*#__PURE__*/React.createElement(FormControlLabel, {\n          control: /*#__PURE__*/React.createElement(Checkbox, {\n            checked: checked[index],\n            onChange: handleCbChange,\n            color: \"primary\",\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 24\n            }\n          }),\n          label: opt.content,\n          value: index,\n          key: index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 15\n          }\n        });\n      }));\n    } else if (props.qInfo.type === \"scale\") {\n      return /*#__PURE__*/React.createElement(Slider, {\n        defaultValue: 3,\n        min: 1,\n        max: 5,\n        step: 1,\n        marks: true,\n        valueLabelDisplay: \"auto\",\n        style: {\n          width: \"40vw\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 9\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.questionPaper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    alignItems: \"flex-start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, \" \", props.qInfo.content, \" \")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, displayMainArea()))));\n}","map":{"version":3,"sources":["D:/src/SurveyApp/SurveyAppClient/src/components/Question.js"],"names":["React","useState","useEffect","Paper","makeStyles","Typography","Grid","RadioGroup","Radio","FormControl","FormControlLabel","Checkbox","Slider","styles","useStyles","Question","props","classes","radioValue","setRadioValue","qInfo","type","cb","i","options","length","checked","setChecked","handleRadioChange","e","target","value","update","index","Number","handleCbChange","console","log","slice","displayMainArea","toString","map","opt","optId","content","width","questionPaper"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Paper, makeStyles, Typography, Grid, RadioGroup, Radio, FormControl, FormControlLabel, Checkbox, Slider} from '@material-ui/core';\r\n\r\n\r\nimport styles from \"../styles/QuestionStyle\";\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function Question(props) {\r\n\r\n  const classes = useStyles();\r\n  const [radioValue, setRadioValue] = useState('');\r\n  const [checked, setChecked] = useState(() => {\r\n    if (props.qInfo.type===\"cb\") {\r\n      let cb = [];\r\n      for(let i=0; i<props.qInfo.options.length; i++) {\r\n        cb = [...cb, false];\r\n      }\r\n      return cb;\r\n    }\r\n  });\r\n  \r\n  // console.log(value);\r\n  // console.log(props.qInfo);\r\n  \r\n  useEffect(() => {\r\n\r\n  }, []);\r\n\r\n  const handleRadioChange = (e) => {\r\n    setRadioValue(e.target.value);\r\n    props.update(props.index, Number(e.target.value));\r\n  }\r\n\r\n  const handleCbChange = (e) => {\r\n    console.log(e.target.value);\r\n    let cb = checked.slice();\r\n    cb[e.target.value] = !cb[e.target.value];\r\n    setChecked(cb);\r\n    console.log(cb);\r\n  }\r\n\r\n  const displayMainArea = () => {\r\n    if (props.qInfo.type===\"mc\") {\r\n      return (\r\n        <FormControl component=\"fieldset\" >\r\n        <RadioGroup onChange={handleRadioChange} value={radioValue.toString()}>\r\n          {\r\n            props.qInfo.options.map((opt, index) => (\r\n              <FormControlLabel \r\n              value={opt.optId.toString()} \r\n              control={<Radio color=\"primary\" />} \r\n              label={opt.content}\r\n              key={index} />\r\n            ))\r\n          }\r\n        </RadioGroup>\r\n        </FormControl>\r\n      );\r\n    }\r\n    else if (props.qInfo.type===\"cb\") {\r\n      return (\r\n        <FormControl>\r\n          {\r\n            props.qInfo.options.map((opt, index) => {\r\n              return (\r\n              <FormControlLabel \r\n              control={<Checkbox checked={checked[index]} onChange={handleCbChange} color=\"primary\" />}\r\n              label={opt.content} \r\n              value={index}\r\n              key={index} />);\r\n            })\r\n          }\r\n        </FormControl>\r\n      );\r\n    }\r\n    else if (props.qInfo.type===\"scale\") {\r\n      return (\r\n        <Slider \r\n        defaultValue={3}\r\n        min={1}\r\n        max={5}\r\n        step={1}\r\n        marks \r\n        valueLabelDisplay=\"auto\"\r\n        style={{width: \"40vw\"}} />\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper className={classes.questionPaper}>\r\n        <Grid container direction=\"column\" alignItems=\"flex-start\" >\r\n          <Grid item>\r\n            <Typography> {props.qInfo.content} </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            {displayMainArea()}\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n\r\n}"]},"metadata":{},"sourceType":"module"}