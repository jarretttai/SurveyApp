{"ast":null,"code":"import _slicedToArray from \"D:\\\\src\\\\SurveyApp\\\\SurveyAppClient\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\src\\\\SurveyApp\\\\SurveyAppClient\\\\src\\\\views\\\\Survey.js\";\nimport React, { useState, useEffect } from 'react';\nimport AppHeader from \"../components/AppHeader\";\nimport AppDrawer from \"../components/AppDrawer\";\nimport Question from \"../components/Question\";\nimport { Grid, Typography, Button, Paper } from '@material-ui/core';\nexport default function Survey(props) {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      cascade = _useState2[0],\n      setCascade = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      answers = _useState4[0],\n      setAnswers = _useState4[1];\n\n  var questions = [];\n  var title;\n  useEffect(function () {//fetch 获取 title\n    //fetch 获取 questions\n    //set state of cascade\n  }, []); //test\n\n  questions = [{\n    formId: 8,\n    qstnId: 1,\n    type: \"mc\",\n    content: \"is life always this hard?\",\n    option: [{\n      optId: 1,\n      content: \"always like this\",\n      cascadeQstnId: 3\n    }, {\n      optId: 1,\n      content: \"always like this\",\n      cascadeQstnId: 3\n    }]\n  }, {\n    formId: 8,\n    qstnId: 2,\n    type: \"realNum\",\n    content: \"question 2: real number\",\n    option: []\n  }, {\n    formId: 8,\n    qstnId: 3,\n    type: \"scale\",\n    content: \"question 3: scale\",\n    option: []\n  }, {\n    formId: 8,\n    qstnId: 4,\n    type: \"cb\",\n    content: \"is life always this hard?\",\n    option: [{\n      optId: 1,\n      content: \"always like this\",\n      cascadeQstnId: undefined\n    }, {\n      optId: 1,\n      content: \"always like this\",\n      cascadeQstnId: undefined\n    }]\n  }];\n  console.log(questions);\n\n  var isCascaded = function isCascaded(qstnId) {\n    for (var i = 0; i < cascade.length; i++) {\n      if (cascade[i] == qstnId) return true;\n    }\n\n    return false;\n  };\n\n  var updateAnswer = function updateAnswer() {};\n\n  var updateCascade = function updateCascade() {};\n\n  var submitResponse = function submitResponse() {};\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, title))), questions.map(function (q, index) {\n    if (isCascaded(q.qstnId)) return null;\n    return /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Question, {\n      key: index,\n      index: index,\n      qInfo: q,\n      updateAns: updateAnswer,\n      updateCas: updateCascade,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }\n    }));\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: submitResponse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, \"Submit\"))));\n}","map":{"version":3,"sources":["D:/src/SurveyApp/SurveyAppClient/src/views/Survey.js"],"names":["React","useState","useEffect","AppHeader","AppDrawer","Question","Grid","Typography","Button","Paper","Survey","props","cascade","setCascade","answers","setAnswers","questions","title","formId","qstnId","type","content","option","optId","cascadeQstnId","undefined","console","log","isCascaded","i","length","updateAnswer","updateCascade","submitResponse","map","q","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport AppHeader from \"../components/AppHeader\";\r\nimport AppDrawer from \"../components/AppDrawer\";\r\nimport Question from \"../components/Question\";\r\nimport { Grid, Typography, Button, Paper } from '@material-ui/core';\r\n\r\nexport default function Survey(props) {\r\n\r\n  const [cascade, setCascade] = useState([]);\r\n  const [answers, setAnswers] = useState([]);\r\n  let questions = [];\r\n  let title;\r\n\r\n  useEffect(() => {\r\n    //fetch 获取 title\r\n    //fetch 获取 questions\r\n    //set state of cascade\r\n  }, []);\r\n\r\n  //test\r\n  questions = [\r\n    {\r\n      formId: 8,\r\n      qstnId: 1,\r\n      type: \"mc\",\r\n      content: \"is life always this hard?\",\r\n      option: [\r\n        {\r\n          optId: 1,\r\n          content: \"always like this\",\r\n          cascadeQstnId: 3\r\n        },\r\n        {\r\n          optId: 1,\r\n          content: \"always like this\",\r\n          cascadeQstnId: 3\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      formId: 8,\r\n      qstnId: 2,\r\n      type: \"realNum\",\r\n      content: \"question 2: real number\",\r\n      option: []\r\n    },\r\n    {\r\n      formId: 8,\r\n      qstnId: 3,\r\n      type: \"scale\",\r\n      content: \"question 3: scale\",\r\n      option: []\r\n    },\r\n    {\r\n      formId: 8,\r\n      qstnId: 4,\r\n      type: \"cb\",\r\n      content: \"is life always this hard?\",\r\n      option: [\r\n        {\r\n          optId: 1,\r\n          content: \"always like this\",\r\n          cascadeQstnId: undefined\r\n        },\r\n        {\r\n          optId: 1,\r\n          content: \"always like this\",\r\n          cascadeQstnId: undefined\r\n        }\r\n      ]\r\n    }\r\n  ];\r\n  console.log(questions);\r\n\r\n  const isCascaded = qstnId => {\r\n    for (let i=0; i<cascade.length; i++)\r\n      if (cascade[i]==qstnId) return true;\r\n    return false;\r\n  }\r\n\r\n  const updateAnswer = () => {}\r\n\r\n  const updateCascade = () => {}\r\n\r\n  const submitResponse = () => {}\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grid container direction=\"column\">\r\n        <Grid item>\r\n          <Paper>\r\n            <Typography>\r\n              {title}\r\n            </Typography>\r\n          </Paper>\r\n        </Grid>\r\n        {\r\n          questions.map((q, index) => {\r\n            if (isCascaded(q.qstnId)) return null;\r\n            return (\r\n              <Grid item>\r\n                <Question \r\n                key={index}\r\n                index={index}\r\n                qInfo = {q}\r\n                updateAns = {updateAnswer}\r\n                updateCas = {updateCascade} />\r\n              </Grid>\r\n            );\r\n          })\r\n        }\r\n        <Grid item>\r\n          <Button\r\n          onClick = {submitResponse} >\r\n            Submit\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n}"]},"metadata":{},"sourceType":"module"}