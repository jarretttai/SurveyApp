{"ast":null,"code":"import _slicedToArray from \"D:\\\\src\\\\SurveyApp\\\\SurveyAppClient\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\src\\\\SurveyApp\\\\SurveyAppClient\\\\src\\\\components\\\\StatisticCard.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Typography, Paper, makeStyles, Box } from \"@material-ui/core\";\nimport { Chart, ArgumentAxis, ValueAxis, BarSeries, Legend, Tooltip } from '@devexpress/dx-react-chart-material-ui';\nimport { EventTracker } from '@devexpress/dx-react-chart';\nimport { ValueScale } from \"@devexpress/dx-react-chart\";\nimport { scaleLog } from 'd3-scale';\nimport styles from \"../styles/StatisticPageStyle\";\nvar useStyles = makeStyles(styles);\nexport default function StatisticCard(props) {\n  var _this = this;\n\n  var classes = useStyles();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  useEffect(function () {\n    var headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json;charset=UTF-8\");\n    var init = {\n      method: 'GET',\n      headers: headers\n    };\n    var url = \"/api/statistics/\".concat(props.qInfo.type, \"/\").concat(props.qInfo.formId, \"/\").concat(props.qInfo.qstnId);\n    fetch(url, init).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      console.log(props.qInfo.qstnId + ': ' + res);\n\n      if (props.qInfo.type === \"mc\" || props.qInfo.type === \"cb\") {\n        var stats = [];\n\n        for (var i = 0; i < res.length; i++) {\n          stats[i] = {\n            content: props.qInfo.options[i].content,\n            count: res[i]\n          };\n        }\n\n        setData(stats);\n      } else if (props.qInfo.type === \"scale\") {\n        var _stats = [];\n\n        for (var _i = 0; _i < res.length; _i++) {\n          _stats[_i] = {\n            content: _i.toString(),\n            count: res[_i]\n          };\n        }\n\n        setData(_stats);\n      } else {\n        setData(res);\n      }\n    });\n  }, []);\n\n  var getStatistics = function getStatistics() {\n    if (props.qInfo.type === \"mc\" || props.qInfo.type === \"cb\") {\n      return /*#__PURE__*/React.createElement(Chart, {\n        data: data,\n        className: classes.chart,\n        height: \"200\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ValueScale, {\n        modifyDomain: function modifyDomain(domain) {\n          return [domain[0], domain[1] * 4];\n        },\n        factory: function factory() {\n          return bandWidth = function bandWidth() {\n            return 1;\n          };\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(ArgumentAxis, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(ValueAxis, {\n        showGrid: false,\n        showLine: true,\n        showTicks: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(BarSeries, {\n        name: \"options\",\n        valueField: \"count\",\n        argumentField: \"content\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Legend, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(EventTracker, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Tooltip, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }\n      }));\n    } else if (props.qInfo.type === \"intNum\" || props.qInfo.type === \"realNum\") {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Box, {\n        className: classes.answerBox,\n        borderRadius: 10,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }\n      }, \"Max: \".concat(data.max))), /*#__PURE__*/React.createElement(Box, {\n        className: classes.answerBox,\n        borderRadius: 10,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }, \"Min: \".concat(data.min))), /*#__PURE__*/React.createElement(Box, {\n        className: classes.answerBox,\n        borderRadius: 10,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Typography, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }\n      }, \"Average: \".concat(data.average))));\n    } else if (props.qInfo.type === \"scale\") {\n      return /*#__PURE__*/React.createElement(Chart, {\n        data: data,\n        className: classes.chart,\n        height: \"200\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ValueScale, {\n        modifyDomain: function modifyDomain(domain) {\n          return [domain[0], domain[1] * 4];\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(ArgumentAxis, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(ValueAxis, {\n        showGrid: false,\n        showLine: true,\n        showTicks: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(BarSeries, {\n        name: \"scale\",\n        valueField: \"count\",\n        argumentField: \"content\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Legend, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(EventTracker, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Tooltip, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }));\n    } else if (props.qInfo.type === \"text\") {\n      return /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }\n      }, data.length ? data.map(function (ans, index) {\n        return /*#__PURE__*/React.createElement(Box, {\n          className: classes.answerBox,\n          borderRadius: 10,\n          key: index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(Typography, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }\n        }, ans));\n      }) : null);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.statisticCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, \" \", \"Q\".concat(props.qInfo.qstnId, \": \").concat(props.qInfo.content), \" \"), getStatistics()));\n}","map":{"version":3,"sources":["D:/src/SurveyApp/SurveyAppClient/src/components/StatisticCard.js"],"names":["React","useState","useEffect","Typography","Paper","makeStyles","Box","Chart","ArgumentAxis","ValueAxis","BarSeries","Legend","Tooltip","EventTracker","ValueScale","scaleLog","styles","useStyles","StatisticCard","props","classes","data","setData","headers","Headers","append","init","method","url","qInfo","type","formId","qstnId","fetch","then","res","json","console","log","stats","i","length","content","options","count","toString","getStatistics","chart","domain","bandWidth","answerBox","max","min","average","map","ans","index","statisticCard"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Typography, Paper, makeStyles, Box } from \"@material-ui/core\";\r\nimport { Chart, ArgumentAxis, ValueAxis, BarSeries, Legend, Tooltip, } from '@devexpress/dx-react-chart-material-ui';\r\nimport { EventTracker } from '@devexpress/dx-react-chart';\r\nimport { ValueScale } from \"@devexpress/dx-react-chart\";\r\nimport { scaleLog } from 'd3-scale';\r\n\r\nimport styles from \"../styles/StatisticPageStyle\";\r\n\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function StatisticCard(props) {\r\n\r\n  const classes = useStyles();\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let headers = new Headers();\r\n    headers.append(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    const init = {\r\n      method: 'GET',\r\n      headers: headers\r\n    };\r\n    const url = `/api/statistics/${props.qInfo.type}/${props.qInfo.formId}/${props.qInfo.qstnId}`;\r\n    fetch(url, init)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        console.log(props.qInfo.qstnId+': '+res); \r\n        if (props.qInfo.type===\"mc\" || props.qInfo.type===\"cb\") {\r\n          let stats = [];\r\n          for (let i=0; i<res.length; i++) {\r\n            stats[i] = {content: props.qInfo.options[i].content, count: res[i]};\r\n          }\r\n          setData(stats);\r\n        }\r\n        else if (props.qInfo.type===\"scale\") {\r\n          let stats = [];\r\n          for (let i=0; i<res.length; i++) {\r\n            stats[i] = {content: i.toString(), count: res[i]};\r\n          }\r\n          setData(stats);\r\n        }\r\n        else {\r\n          setData(res);\r\n        }\r\n\r\n    });\r\n  }, []);\r\n\r\n  const getStatistics = () => {\r\n    if (props.qInfo.type===\"mc\" || props.qInfo.type===\"cb\") {\r\n      return (\r\n        <Chart data={data} className={classes.chart} height=\"200\" >\r\n          <ValueScale modifyDomain={domain=>[domain[0], domain[1]*4]} factory={()=>(bandWidth = () => 1)} />\r\n          <ArgumentAxis />\r\n          <ValueAxis showGrid={false} showLine showTicks />\r\n          <BarSeries  \r\n            name=\"options\"\r\n            valueField=\"count\"\r\n            argumentField=\"content\"\r\n          />\r\n          <Legend />\r\n          <EventTracker />\r\n          <Tooltip />\r\n        </Chart>\r\n      );\r\n    }\r\n    else if (props.qInfo.type===\"intNum\"||props.qInfo.type===\"realNum\") {\r\n      return (\r\n        <React.Fragment>\r\n          <Box className={classes.answerBox} borderRadius={10}>\r\n            <Typography>{`Max: ${data.max}`}</Typography>\r\n          </Box>\r\n          <Box className={classes.answerBox} borderRadius={10}>\r\n            <Typography>{`Min: ${data.min}`}</Typography>\r\n          </Box>\r\n          <Box className={classes.answerBox} borderRadius={10}>\r\n            <Typography>{`Average: ${data.average}`}</Typography>\r\n          </Box>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n    else if (props.qInfo.type===\"scale\") {\r\n      return (\r\n        <Chart data={data} className={classes.chart} height=\"200\" >\r\n          <ValueScale modifyDomain={domain=>[domain[0], domain[1]*4]} />\r\n          <ArgumentAxis />\r\n          <ValueAxis showGrid={false} showLine showTicks />\r\n          <BarSeries  \r\n            name=\"scale\"\r\n            valueField=\"count\"\r\n            argumentField=\"content\"\r\n          />\r\n          <Legend />\r\n          <EventTracker />\r\n          <Tooltip />\r\n        </Chart>\r\n      );      \r\n    }\r\n    else if (props.qInfo.type===\"text\") {\r\n      return (\r\n        <React.Fragment>\r\n          { data.length ? data.map((ans, index) => (\r\n            <Box className={classes.answerBox} borderRadius={10} key={index}>\r\n              <Typography>{ans}</Typography>\r\n            </Box>            \r\n          )):null }\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper className={classes.statisticCard} >\r\n        <Typography> {`Q${props.qInfo.qstnId}: ${props.qInfo.content}`} </Typography>\r\n        {/* <Box bgcolor=\"text.disabled\" color=\"primary.contrastText\" width=\"20vw\" padding={1} >{props.qInfo.formId}  </Box> */}\r\n        {getStatistics()}\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}