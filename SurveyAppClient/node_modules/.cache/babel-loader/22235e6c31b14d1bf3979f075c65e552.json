{"ast":null,"code":"import _slicedToArray from \"D:\\\\src\\\\SurveyApp\\\\SurveyAppClient\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\src\\\\SurveyApp\\\\SurveyAppClient\\\\src\\\\components\\\\StatisticCard.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Typography, Paper, makeStyles, Box } from \"@material-ui/core\";\nimport { Chart, ArgumentAxis, ValueAxis, BarSeries, Legend } from '@devexpress/dx-react-chart-material-ui';\nimport styles from \"../styles/StatisticPageStyle\";\nimport { ValueScale } from \"@devexpress/dx-react-chart\";\nvar useStyles = makeStyles(styles);\nexport default function StatisticCard(props) {\n  var _this = this;\n\n  var classes = useStyles();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  useEffect(function () {\n    var headers = new Headers();\n    headers.append(\"Content-Type\", \"application/json;charset=UTF-8\");\n    var init = {\n      method: 'GET',\n      headers: headers\n    };\n    var url = \"/api/statistics/\".concat(props.qInfo.type, \"/\").concat(props.qInfo.formId, \"/\").concat(props.qInfo.qstnId);\n    fetch(url, init).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      console.log(props.qInfo.qstnId + ': ' + res);\n\n      if (props.qInfo.type === \"mc\" || props.qInfo.type === \"cb\") {\n        var stat = [];\n\n        for (var i = 0; i < res.length; i++) {\n          stat[i] = {\n            content: props.qInfo.options[i].content,\n            count: res[i]\n          };\n        }\n\n        console.log(stat);\n        setData(stat);\n      }\n    });\n  }, []);\n\n  var getStatistics = function getStatistics() {\n    if (props.qInfo.type === \"mc\" || props.qInfo.type === \"cb\") {\n      return /*#__PURE__*/React.createElement(Chart, {\n        data: data,\n        height: \"190\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(ValueScale, {\n        name: \"content\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(ArgumentAxis, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(ValueAxis, {\n        scaleName: \"content\",\n        showGrid: false,\n        showLine: true,\n        showTicks: true,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(BarSeries, {\n        name: \"options\",\n        valueField: \"count\",\n        argumentField: \"content\",\n        scaleName: \"content\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Legend, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.statisticCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \" \", \"Q\".concat(props.qInfo.qstnId, \": \").concat(props.qInfo.content), \" \"), getStatistics()));\n}","map":{"version":3,"sources":["D:/src/SurveyApp/SurveyAppClient/src/components/StatisticCard.js"],"names":["React","useState","useEffect","Typography","Paper","makeStyles","Box","Chart","ArgumentAxis","ValueAxis","BarSeries","Legend","styles","ValueScale","useStyles","StatisticCard","props","classes","data","setData","headers","Headers","append","init","method","url","qInfo","type","formId","qstnId","fetch","then","res","json","console","log","stat","i","length","content","options","count","getStatistics","statisticCard"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Typography, Paper, makeStyles, Box } from \"@material-ui/core\";\r\nimport { Chart, ArgumentAxis, ValueAxis, BarSeries, Legend,} from '@devexpress/dx-react-chart-material-ui';\r\n\r\n\r\nimport styles from \"../styles/StatisticPageStyle\";\r\nimport { ValueScale } from \"@devexpress/dx-react-chart\";\r\n\r\nconst useStyles = makeStyles(styles);\r\n\r\nexport default function StatisticCard(props) {\r\n\r\n  const classes = useStyles();\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let headers = new Headers();\r\n    headers.append(\"Content-Type\", \"application/json;charset=UTF-8\");\r\n    const init = {\r\n      method: 'GET',\r\n      headers: headers\r\n    };\r\n    const url = `/api/statistics/${props.qInfo.type}/${props.qInfo.formId}/${props.qInfo.qstnId}`;\r\n    fetch(url, init)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        console.log(props.qInfo.qstnId+': '+res); \r\n        if (props.qInfo.type===\"mc\" || props.qInfo.type===\"cb\") {\r\n          let stat = [];\r\n          for (let i=0; i<res.length; i++) {\r\n            stat[i] = {content: props.qInfo.options[i].content, count: res[i]};\r\n          }\r\n          console.log(stat);\r\n          setData(stat);\r\n        }\r\n\r\n    });\r\n  }, []);\r\n\r\n  const getStatistics = () => {\r\n    if (props.qInfo.type===\"mc\" || props.qInfo.type===\"cb\") {\r\n\r\n      return (\r\n        <Chart data={data} height=\"190\" >\r\n          <ValueScale name=\"content\" />\r\n          <ArgumentAxis />\r\n          <ValueAxis scaleName=\"content\" showGrid={false} showLine showTicks />\r\n          <BarSeries  \r\n            name=\"options\"\r\n            valueField=\"count\"\r\n            argumentField=\"content\"\r\n            scaleName=\"content\"\r\n          />\r\n          <Legend />\r\n        </Chart>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Paper className={classes.statisticCard} >\r\n        <Typography> {`Q${props.qInfo.qstnId}: ${props.qInfo.content}`} </Typography>\r\n        {/* <Box bgcolor=\"text.disabled\" color=\"primary.contrastText\" width=\"20vw\" padding={1} >{props.qInfo.formId}  </Box> */}\r\n        {getStatistics()}\r\n      </Paper>\r\n    </React.Fragment>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}